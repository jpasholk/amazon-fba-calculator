---
import { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle, DialogTrigger, DialogClose } from "@/components/starwind/dialog";
import { Select, SelectTrigger, SelectValue, SelectContent, SelectItem, SelectGroup, SelectLabel, SelectSeparator } from "@/components/starwind/select";
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/starwind/card";
import { Button } from "@/components/starwind/button";
import { Switch } from "@/components/starwind/switch";
import { Input } from "@/components/starwind/input";
import { Label } from "@/components/starwind/label";
---

<div class="max-w-4xl mx-auto space-y-6">
  <!-- Product Info Card with Dialog -->
  <Card class="w-full">
    <CardHeader>
      <div>
        <CardTitle>Amazon FBA Calculator</CardTitle>
        <CardDescription>Calculate profit margins and fees for your Amazon FBA products</CardDescription>
        <hr class="border-border mt-4" />
      </div>
    </CardHeader>
    <CardContent>
      <!-- Product Summary (shown after entry) -->
      <div id="product-summary" class="hidden space-y-4">
        <!-- Product Name and Price Row -->
        <div class="grid grid-cols-4 gap-4">
          <div class="col-span-3">
            <h2 class="text-xl font-bold" id="summary-name">-</h2>
            <p class="text-sm text-muted-foreground" id="summary-category">-</p>
          </div>
          <div class="text-right">
            <p class="text-2xl font-bold text-green-600 dark:text-green-400" id="summary-price">-</p>
            <p class="text-xs text-muted-foreground">Selling Price</p>
          </div>
        </div>

        <!-- Cost Breakdown Row -->
        <div class="grid grid-cols-4 gap-4 text-sm border-t pt-4">
          <div>
            <span class="text-muted-foreground">Product Cost:</span>
            <p class="font-medium" id="summary-cost">-</p>
          </div>
          <div>
            <span class="text-muted-foreground">Mfg Shipping:</span>
            <p class="font-medium" id="summary-unit-shipping">-</p>
          </div>
          <div>
            <span class="text-muted-foreground">FBA Inbound:</span>
            <p class="font-medium" id="summary-fba-shipping">-</p>
          </div>
          <div>
            <span class="text-muted-foreground">Total Cost:</span>
            <p class="font-semibold" id="summary-total-cost">-</p>
          </div>
        </div>

        <!-- Dimensions Row -->
        <div class="grid grid-cols-4 gap-4 text-sm">
          <div>
            <span class="text-muted-foreground">Length:</span>
            <p class="font-medium" id="summary-length">-</p>
          </div>
          <div>
            <span class="text-muted-foreground">Width:</span>
            <p class="font-medium" id="summary-width">-</p>
          </div>
          <div>
            <span class="text-muted-foreground">Height:</span>
            <p class="font-medium" id="summary-height">-</p>
          </div>
          <div>
            <span class="text-muted-foreground">Weight:</span>
            <p class="font-medium" id="summary-weight">-</p>
          </div>
        </div>
      </div>

      <!-- Debug Info (shown after calculation) -->
      <div id="debug-info" class="hidden text-xs text-muted-foreground py-2">
        <!-- Debug content will be inserted here -->
      </div>

      <!-- Initial state (no product entered) -->
      <div id="no-product-state" class="py-6 text-muted-foreground">
        <p>Enter your product details to start calculating FBA profits</p>
      </div>
    </CardContent>
    <CardFooter>
      <Dialog>
        <DialogTrigger asChild>
          <Button id="product-dialog-trigger" class="w-full">Enter Product Details</Button>
        </DialogTrigger>
        <DialogContent class="sm:max-w-[600px] max-h-[90vh]" animationDuration={200}>
          <form id="product-form" method="dialog" class="flex flex-col gap-4">
            <DialogHeader>
              <DialogTitle>Product Information</DialogTitle>
              <DialogDescription>
                Enter your product details to calculate Amazon FBA fees and profitability.
              </DialogDescription>
            </DialogHeader>
            
            <div class="grid gap-6 py-4 px-1">
              <!-- Basic Info -->
              <div class="space-y-4">
                <h4 class="text-sm font-medium">Basic Information</h4>
                <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div class="space-y-2">
                    <Label for="product-name">Product Name</Label>
                    <Input id="product-name" name="name" placeholder="Enter product name" required />
                  </div>
                  <div class="space-y-2">
                    <Label for="category">Category</Label>
                    <Select id="category" name="category">
                      <SelectTrigger class="w-full">
                        <SelectValue placeholder="Select category" />
                      </SelectTrigger>
                      <SelectContent class="w-full min-w-[200px]">
                        <SelectGroup>
                          <SelectLabel>Product Categories</SelectLabel>
                          <SelectItem value="electronics">Electronics</SelectItem>
                          <SelectItem value="home-kitchen">Home & Kitchen</SelectItem>
                          <SelectItem value="clothing">Clothing & Accessories</SelectItem>
                          <SelectItem value="books">Books</SelectItem>
                          <SelectItem value="toys-games">Toys & Games</SelectItem>
                          <SelectItem value="sports">Sports & Outdoors</SelectItem>
                          <SelectItem value="beauty">Beauty & Personal Care</SelectItem>
                          <SelectSeparator />
                          <SelectItem value="other">Other</SelectItem>
                        </SelectGroup>
                      </SelectContent>
                    </Select>
                  </div>
                </div>
                <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div class="space-y-2">
                    <Label for="selling-price">Selling Price ($)</Label>
                    <Input type="number" id="selling-price" name="sellingPrice" placeholder="0" step="0.01" min="0" inputmode="decimal" required />
                  </div>
                  <div class="space-y-2">
                    <Label for="cost-of-goods">Product Cost ($)</Label>
                    <Input type="number" id="cost-of-goods" name="costOfGoods" placeholder="0" step="0.01" min="0" inputmode="decimal" required />
                    <p class="text-xs text-muted-foreground">Cost to manufacture/purchase the product</p>
                  </div>
                </div>
                <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div class="space-y-2">
                    <Label for="unit-shipping-cost">Unit Shipping Cost ($)</Label>
                    <Input type="number" id="unit-shipping-cost" name="unitShippingCost" placeholder="0" step="0.01" min="0" inputmode="decimal" />
                    <p class="text-xs text-muted-foreground">Per-unit cost to ship from manufacturer</p>
                  </div>
                  <div class="space-y-2">
                    <Label for="fba-shipping-cost">FBA Shipping Cost ($)</Label>
                    <Input type="number" id="fba-shipping-cost" name="fbaShippingCost" placeholder="0" step="0.01" min="0" inputmode="decimal" />
                    <p class="text-xs text-muted-foreground">Total cost to ship batch to Amazon warehouse</p>
                  </div>
                </div>
              </div>

              <!-- Dimensions -->
              <div class="space-y-4">
                <div class="flex items-center justify-between">
                  <h4 class="text-sm font-medium">Product Dimensions</h4>
                  <div class="flex items-center gap-2">
                    <Label for="unit-toggle" class="text-xs font-medium">
                      Imperial Units
                    </Label>
                    <Switch id="unit-toggle" />
                  </div>
                </div>
                <div id="unit-display" class="text-xs text-muted-foreground mb-2">
                  Currently: Metric (cm/kg)
                </div>
                <div class="grid grid-cols-2 md:grid-cols-4 gap-4">
                  <div class="space-y-2">
                    <Label for="length" id="length-label">Length (cm)</Label>
                    <Input type="number" id="length" name="length" placeholder="0" step="0.1" min="0" inputmode="decimal" required />
                  </div>
                  <div class="space-y-2">
                    <Label for="width" id="width-label">Width (cm)</Label>
                    <Input type="number" id="width" name="width" placeholder="0" step="0.1" min="0" inputmode="decimal" required />
                  </div>
                  <div class="space-y-2">
                    <Label for="height" id="height-label">Height (cm)</Label>
                    <Input type="number" id="height" name="height" placeholder="0" step="0.1" min="0" inputmode="decimal" required />
                  </div>
                  <div class="space-y-2">
                    <Label for="weight" id="weight-label">Weight (kg)</Label>
                    <Input type="number" id="weight" name="weight" placeholder="0" step="0.001" min="0" inputmode="decimal" required />
                  </div>
                </div>
              </div>

              <!-- Inventory Planning -->
              <div class="space-y-4">
                <h4 class="text-sm font-medium">Inventory Planning</h4>
                <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div class="space-y-2">
                    <Label for="average-units">Average Units in FBA</Label>
                    <Input type="number" id="average-units" name="averageUnits" placeholder="100" value="100" min="1" inputmode="numeric" />
                    <p class="text-xs text-muted-foreground">How many units do you plan to keep in stock?</p>
                  </div>
                </div>
              </div>
            </div>
            
            <DialogFooter>
              <DialogClose asChild>
                <Button type="button" variant="outline">Cancel</Button>
              </DialogClose>
              <Button type="submit">Calculate Profit</Button>
            </DialogFooter>
          </form>
        </DialogContent>
      </Dialog>
    </CardFooter>
  </Card>

  <!-- Results Section -->
  <div class="grid grid-cols-1 lg:grid-cols-2 gap-6">
    <!-- Profit Analysis Card -->
    <Card class="w-full">
      <CardHeader>
        <CardTitle>Profit Analysis</CardTitle>
        <CardDescription>Comprehensive FBA calculations</CardDescription>
      </CardHeader>
      <CardContent>
        <div id="results-container" class="space-y-4">
          <div class="py-6 text-muted-foreground">
            <p>Enter product details to see profit analysis</p>
          </div>
        </div>
      </CardContent>
    </Card>

    <!-- Success Criteria Card -->
    <Card class="w-full">
      <CardHeader>
        <CardTitle>Success Criteria</CardTitle>
        <CardDescription>FBA viability assessment</CardDescription>
      </CardHeader>
      <CardContent>
        <div id="criteria-container" class="space-y-3">
          <div class="py-6 text-muted-foreground">
            <p>Criteria will appear after calculation</p>
          </div>
        </div>
      </CardContent>
    </Card>
  </div>
</div>

<script>
  import { calculateAmazonFees, calculateProfitability, evaluateSuccessCriteria, calculateFBASizeTier, cmToInches, kgToPounds } from '../utils/fbaCalculations';
  import type { ProductData } from '../types/calculator';
  import type { SwitchChangeEvent } from "@/components/starwind/switch";

  document.addEventListener('DOMContentLoaded', function() {
    const form = document.getElementById('product-form') as HTMLFormElement;
    const resultsContainer = document.getElementById('results-container')!;
    const criteriaContainer = document.getElementById('criteria-container')!;
    const unitToggle = document.getElementById('unit-toggle') as HTMLElement;
    const unitDisplay = document.getElementById('unit-display') as HTMLSpanElement;
    const triggerButton = document.getElementById('product-dialog-trigger') as HTMLButtonElement;
    
    // Summary elements
    const productSummary = document.getElementById('product-summary')!;
    const noProductState = document.getElementById('no-product-state')!;

    // Unit labels
    const lengthLabel = document.getElementById('length-label') as HTMLLabelElement;
    const widthLabel = document.getElementById('width-label') as HTMLLabelElement;
    const heightLabel = document.getElementById('height-label') as HTMLLabelElement;
    const weightLabel = document.getElementById('weight-label') as HTMLLabelElement;

    let isImperialUnits = false;
    let currentProductData: ProductData | null = null;

    function updateUnitDisplay() {
      if (isImperialUnits) {
        unitDisplay.textContent = 'Currently: Imperial (inches/lbs)';
        lengthLabel.textContent = 'Length (inches)';
        widthLabel.textContent = 'Width (inches)';
        heightLabel.textContent = 'Height (inches)';
        weightLabel.textContent = 'Weight (lbs)';
        
        (document.getElementById('length') as HTMLInputElement).placeholder = '0';
        (document.getElementById('width') as HTMLInputElement).placeholder = '0';
        (document.getElementById('height') as HTMLInputElement).placeholder = '0';
        (document.getElementById('weight') as HTMLInputElement).placeholder = '0';
      } else {
        unitDisplay.textContent = 'Currently: Metric (cm/kg)';
        lengthLabel.textContent = 'Length (cm)';
        widthLabel.textContent = 'Width (cm)';
        heightLabel.textContent = 'Height (cm)';
        weightLabel.textContent = 'Weight (kg)';
        
        (document.getElementById('length') as HTMLInputElement).placeholder = '0';
        (document.getElementById('width') as HTMLInputElement).placeholder = '0';
        (document.getElementById('height') as HTMLInputElement).placeholder = '0';
        (document.getElementById('weight') as HTMLInputElement).placeholder = '0';
      }
      
      if (currentProductData) {
        updateProductSummary(currentProductData);
      }
    }

    // Initialize
    isImperialUnits = false;
    updateUnitDisplay();

    // Unit toggle listener
    unitToggle.addEventListener("starwind-switch:change", (e: Event) => {
      const event = e as SwitchChangeEvent;
      if (event.detail.switchId === "unit-toggle") {
        isImperialUnits = event.detail.checked;
        updateUnitDisplay();
        if (currentProductData) {
          calculateResults();
        }
      }
    });

    // Update product summary display
    function updateProductSummary(productData: ProductData) {
      const unitSuffix = isImperialUnits ? 
        { length: '"', weight: ' lbs' } : 
        { length: ' cm', weight: ' kg' };

      // Map category values to display names
      function getCategoryDisplayName(categoryValue: string): string {
        const categoryMap: { [key: string]: string } = {
          'electronics': 'Electronics',
          'home-kitchen': 'Home & Kitchen',
          'clothing': 'Clothing & Accessories',
          'books': 'Books',
          'toys-games': 'Toys & Games',
          'sports': 'Sports & Outdoors',
          'beauty': 'Beauty & Personal Care',
          'other': 'Other'
        };
        return categoryMap[categoryValue] || categoryValue;
      }

      const totalCost = productData.costOfGoods + (productData.unitShippingCost || 0) + (productData.fbaShippingCost || 0);

      document.getElementById('summary-name')!.textContent = productData.name;
      document.getElementById('summary-price')!.textContent = `$${productData.sellingPrice.toFixed(2)}`;
      document.getElementById('summary-cost')!.textContent = `$${productData.costOfGoods.toFixed(2)}`;
      document.getElementById('summary-unit-shipping')!.textContent = `$${(productData.unitShippingCost || 0).toFixed(2)}`;
      document.getElementById('summary-fba-shipping')!.textContent = `$${(productData.fbaShippingCost || 0).toFixed(2)}`;
      document.getElementById('summary-category')!.textContent = getCategoryDisplayName(productData.category);
      document.getElementById('summary-total-cost')!.textContent = `$${totalCost.toFixed(2)}`;
      
      document.getElementById('summary-length')!.textContent = `${productData.dimensions.length}${unitSuffix.length}`;
      document.getElementById('summary-width')!.textContent = `${productData.dimensions.width}${unitSuffix.length}`;
      document.getElementById('summary-height')!.textContent = `${productData.dimensions.height}${unitSuffix.length}`;
      document.getElementById('summary-weight')!.textContent = `${productData.dimensions.weight}${unitSuffix.weight}`;

      // Show summary, hide no-product state
      productSummary.classList.remove('hidden');
      noProductState.classList.add('hidden');
      triggerButton.textContent = 'Edit Product Details';
    }

    // Form submission handler
    form.addEventListener('submit', function(e) {
      e.preventDefault();
      
      const formData = new FormData(form);
      const productData: ProductData = {
        name: formData.get('name') as string,
        sellingPrice: parseFloat(formData.get('sellingPrice') as string),
        costOfGoods: parseFloat(formData.get('costOfGoods') as string),
        unitShippingCost: parseFloat(formData.get('unitShippingCost') as string) || 0,
        fbaShippingCost: parseFloat(formData.get('fbaShippingCost') as string) || 0,
        category: formData.get('category') as string,
        dimensions: {
          length: parseFloat(formData.get('length') as string),
          width: parseFloat(formData.get('width') as string),
          height: parseFloat(formData.get('height') as string),
          weight: parseFloat(formData.get('weight') as string)
        }
      };

      // Validation
      if (!productData.name || !productData.category || 
          isNaN(productData.sellingPrice) || isNaN(productData.costOfGoods) ||
          isNaN(productData.dimensions.length) || isNaN(productData.dimensions.width) ||
          isNaN(productData.dimensions.height) || isNaN(productData.dimensions.weight)) {
        alert('Please fill in all required fields');
        return;
      }

      currentProductData = productData;
      updateProductSummary(productData);
      calculateResults();
    });

    function formatCurrency(amount: number): string {
      return new Intl.NumberFormat('en-US', {
        style: 'currency',
        currency: 'USD'
      }).format(amount);
    }

    function formatSmallCurrency(amount: number): string {
      if (amount > 0 && amount < 0.01) {
        return `$${amount.toFixed(4)}`;
      }
      return formatCurrency(amount);
    }

    function calculateResults() {
      if (!currentProductData) return;

      const averageUnitsElement = document.getElementById('average-units') as HTMLInputElement;
      const averageUnits = averageUnitsElement ? parseInt(averageUnitsElement.value) || 100 : 100;
      
      const useMetric = !isImperialUnits;
      const fees = calculateAmazonFees(currentProductData, useMetric, { averageUnitsStored: averageUnits });
      const profitability = calculateProfitability(currentProductData, fees);
      const criteria = evaluateSuccessCriteria(currentProductData, profitability, useMetric);
      const sizeTier = calculateFBASizeTier(currentProductData.dimensions, useMetric);

      // Calculate ad spend
      const adSpend = Math.floor(currentProductData.sellingPrice * 0.20 * 100) / 100;
      
      // Calculate break-even price including ad spend
      const breakEvenWithAds = profitability.breakEvenPrice + adSpend;

      // Show the OTHER unit system for reference
      const debugContent = useMetric ? 
        `<span class="font-medium">Imperial equivalent:</span> ${(cmToInches(currentProductData.dimensions.length)).toFixed(2)}" × ${(cmToInches(currentProductData.dimensions.width)).toFixed(2)}" × ${(cmToInches(currentProductData.dimensions.height)).toFixed(2)}" (${(kgToPounds(currentProductData.dimensions.weight)).toFixed(2)} lbs)` :
        `<span class="font-medium">Metric equivalent:</span> ${(currentProductData.dimensions.length * 2.54).toFixed(1)}cm × ${(currentProductData.dimensions.width * 2.54).toFixed(1)}cm × ${(currentProductData.dimensions.height * 2.54).toFixed(1)}cm (${(currentProductData.dimensions.weight * 0.453592).toFixed(3)}kg)`;

      // Update debug info in the top card
      const debugInfoElement = document.getElementById('debug-info')!;
      debugInfoElement.innerHTML = debugContent;
      debugInfoElement.classList.remove('hidden');

      // Render profit analysis without debug info
      resultsContainer.innerHTML = `
        <div class="space-y-4">
          <div class="border-b border-border pb-3">
            <h4 class="font-medium text-sm text-muted-foreground uppercase tracking-wide">Size Tier</h4>
            <p class="text-lg font-semibold">${sizeTier.replace('_', ' ')}</p>
          </div>

          <div class="pt-3">
            <h4 class="font-medium text-sm text-muted-foreground mb-2">Fee Breakdown</h4>
            <div class="space-y-1 text-sm">
              <div class="flex justify-between">
                <span>Referral Fee:</span>
                <span>${formatCurrency(fees.referralFee)}</span>
              </div>
              <div class="flex justify-between">
                <span>Fulfillment Fee:</span>
                <span>${formatCurrency(fees.fulfillmentFee)}</span>
              </div>
              <div class="flex justify-between">
                <span>Storage Fee (per unit/month):</span>
                <span>${formatSmallCurrency(fees.storageMonthlyFee)}</span>
              </div>
              <div class="flex justify-between text-xs text-muted-foreground">
                <span>Total for ${averageUnits} units:</span>
                <span>${formatCurrency(fees.storageMonthlyFee * averageUnits)}</span>
              </div>
              <div class="flex justify-between">
                <span>Ad Spend (20%):</span>
                <span>${formatCurrency(adSpend)}</span>
              </div>
              <div class="flex justify-between font-semibold border-t border-border pt-1">
                <span>Total Fees + Ads:</span>
                <span>${formatCurrency(profitability.totalFees + adSpend)}</span>
              </div>
            </div>
          </div>
          
          <div class="grid grid-cols-2 gap-3 border-t border-border pt-3">
            <div>
              <h4 class="font-medium text-sm text-muted-foreground">Net Profit (After Ads)</h4>
              <p class="text-lg font-semibold ${(profitability.netProfit - adSpend) >= 0 ? 'text-green-600 dark:text-green-400' : 'text-red-600 dark:text-red-400'}">
                ${formatCurrency(profitability.netProfit - adSpend)}
              </p>
            </div>
            <div>
              <h4 class="font-medium text-sm text-muted-foreground">Profit Margin (After Ads)</h4>
              <p class="text-lg font-semibold ${((profitability.netProfit - adSpend) / currentProductData.sellingPrice * 100) >= 15 ? 'text-green-600 dark:text-green-400' : 'text-yellow-600 dark:text-yellow-400'}">
                ${(((profitability.netProfit - adSpend) / currentProductData.sellingPrice) * 100).toFixed(1)}%
              </p>
            </div>
          </div>

          <div class="grid grid-cols-2 gap-3">
            <div>
              <h4 class="font-medium text-sm text-muted-foreground">ROI (After Ads)</h4>
              <p class="text-lg font-semibold">${(((profitability.netProfit - adSpend) / profitability.totalCosts) * 100).toFixed(1)}%</p>
            </div>
            <div>
              <h4 class="font-medium text-sm text-muted-foreground">Markup (After Ads)</h4>
              <p class="text-lg font-semibold">${(((profitability.netProfit - adSpend) / profitability.totalCosts) * 100).toFixed(1)}%</p>
            </div>
          </div>

          <div class="border-t border-border pt-3">
            <div class="grid grid-cols-2 gap-3">
              <div>
                <h4 class="font-medium text-sm text-muted-foreground">Break-even Price</h4>
                <p class="text-lg font-semibold">${formatCurrency(profitability.breakEvenPrice)}</p>
                <p class="text-xs text-muted-foreground">Before ads</p>
              </div>
              <div>
                <h4 class="font-medium text-sm text-muted-foreground">Break-even + Ads</h4>
                <p class="text-lg font-semibold">${formatCurrency(breakEvenWithAds)}</p>
                <p class="text-xs text-muted-foreground">Including 20% ad spend</p>
              </div>
            </div>
          </div>
        </div>
      `;
      
      // Render success criteria with dark mode support
      const passedCount = criteria.filter(c => c.passed).length;
      
      // Define color schemes with dark mode support
      let colorScheme;
      if (passedCount === 4) {
        colorScheme = {
          bg: 'bg-green-50 dark:bg-green-950',
          text: 'text-green-700 dark:text-green-300',
          border: 'border-green-500 dark:border-green-600'
        };
      } else if (passedCount === 3) {
        colorScheme = {
          bg: 'bg-blue-50 dark:bg-blue-950',
          text: 'text-blue-700 dark:text-blue-300',
          border: 'border-blue-500 dark:border-blue-600'
        };
      } else if (passedCount === 2) {
        colorScheme = {
          bg: 'bg-yellow-50 dark:bg-yellow-950',
          text: 'text-yellow-700 dark:text-yellow-300',
          border: 'border-yellow-500 dark:border-yellow-600'
        };
      } else if (passedCount === 1) {
        colorScheme = {
          bg: 'bg-orange-50 dark:bg-orange-950',
          text: 'text-orange-700 dark:text-orange-300',
          border: 'border-orange-500 dark:border-orange-600'
        };
      } else {
        colorScheme = {
          bg: 'bg-red-50 dark:bg-red-950',
          text: 'text-red-700 dark:text-red-300',
          border: 'border-red-500 dark:border-red-600'
        };
      }

      criteriaContainer.innerHTML = `
        <div class="space-y-4">
          <div class="text-center p-4 rounded-lg border-2 ${colorScheme.bg} ${colorScheme.text} ${colorScheme.border}">
            <p class="text-lg font-semibold">${passedCount}/4 Criteria Met</p>
            <p class="text-sm">${
              passedCount === 4 ? 'Perfect FBA candidate!' : 
              passedCount === 3 ? 'Excellent FBA candidate!' : 
              passedCount === 2 ? 'Good potential' : 
              passedCount === 1 ? 'Needs improvement' : 
              'Not recommended for FBA'
            }</p>
          </div>
          
          ${criteria.map(criterion => `
            <div class="flex items-center space-x-3">
              <div class="flex-shrink-0">
                ${criterion.passed 
                  ? '<div class="w-3 h-3 bg-green-500 dark:bg-green-400 rounded-full"></div>' 
                  : '<div class="w-3 h-3 bg-red-500 dark:bg-red-400 rounded-full"></div>'
                }
              </div>
              <div class="flex-1">
                <p class="text-base font-semibold text-foreground dark:text-foreground">${criterion.label}</p>
                <p class="text-sm text-muted-foreground dark:text-muted-foreground mt-1">${criterion.value} (${criterion.threshold})</p>
                <p class="text-sm text-muted-foreground dark:text-muted-foreground">${criterion.message}</p>
              </div>
            </div>
          `).join('')}
        </div>
      `;
    }
  });
</script>