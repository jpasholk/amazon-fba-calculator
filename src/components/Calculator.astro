---
import { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle, DialogTrigger, DialogClose } from "@/components/starwind/dialog";
import { Select, SelectTrigger, SelectValue, SelectContent, SelectItem, SelectGroup, SelectLabel, SelectSeparator } from "@/components/starwind/select";
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/starwind/card";
import { Button } from "@/components/starwind/button";
import { Switch } from "@/components/starwind/switch";
import { Input } from "@/components/starwind/input";
import { Label } from "@/components/starwind/label";
import { Skeleton } from "@/components/starwind/skeleton";
---

<div class="max-w-4xl mx-auto space-y-6">
  <!-- Product Info Card with Dialog -->
  <Card class="w-full">
    <CardHeader>
      <div>
        <CardTitle>Amazon FBA Calculator</CardTitle>
        <CardDescription>Calculate profit margins and fees for your Amazon FBA products</CardDescription>
      </div>
    </CardHeader>
    <CardContent>
      <hr class="border-border mb-6" />
      
      <!-- Product Summary (shown after entry) -->
      <div id="product-summary" class="hidden space-y-4">
        <!-- Product Name and Price Row -->
        <div class="grid grid-cols-4 gap-4">
          <div class="col-span-3">
            <h2 class="text-xl font-bold" id="summary-name">-</h2>
            <p class="text-sm text-muted-foreground" id="summary-category">-</p>
          </div>
          <div>
            <p class="text-2xl font-bold text-green-600 dark:text-green-400" id="summary-price">-</p>
            <p class="text-xs text-muted-foreground">Selling Price</p>
          </div>
        </div>

        <!-- Cost Breakdown Row -->
        <div class="grid grid-cols-4 gap-4 text-sm border-t pt-4">
          <div>
            <span class="text-muted-foreground">Product Cost:</span>
            <p class="font-medium" id="summary-cost">-</p>
          </div>
          <div>
            <span class="text-muted-foreground">Mfg Shipping:</span>
            <p class="font-medium" id="summary-unit-shipping">-</p>
          </div>
          <div>
            <span class="text-muted-foreground">FBA Inbound:</span>
            <p class="font-medium" id="summary-fba-shipping">-</p>
          </div>
          <div>
            <span class="text-muted-foreground">Total Cost:</span>
            <p class="font-semibold" id="summary-total-cost">-</p>
          </div>
        </div>

        <!-- Dimensions Row -->
        <div class="grid grid-cols-4 gap-4 text-sm">
          <div>
            <span class="text-muted-foreground">Length:</span>
            <p class="font-medium" id="summary-length">-</p>
          </div>
          <div>
            <span class="text-muted-foreground">Width:</span>
            <p class="font-medium" id="summary-width">-</p>
          </div>
          <div>
            <span class="text-muted-foreground">Height:</span>
            <p class="font-medium" id="summary-height">-</p>
          </div>
          <div>
            <span class="text-muted-foreground">Weight:</span>
            <p class="font-medium" id="summary-weight">-</p>
          </div>
        </div>
      </div>

      <!-- Debug Info (shown after calculation) -->
      <div id="debug-info" class="hidden text-xs text-muted-foreground py-2">
        <!-- Debug content will be inserted here -->
      </div>

      <!-- Product Summary Skeleton (shown during initial load) -->
      <div id="product-skeleton" class="space-y-4">
        <!-- Loading state with overlay text -->
        <div class="relative">
          <!-- Product Name and Price Row Skeleton -->
          <div class="grid grid-cols-4 gap-4 mb-4">
            <div class="col-span-3 space-y-2">
              <Skeleton class="h-6 w-3/4" />
              <Skeleton class="h-4 w-1/2" />
            </div>
            <div class="space-y-2">
              <Skeleton class="h-8 w-full" />
              <Skeleton class="h-3 w-2/3" />
            </div>
          </div>

          <!-- Cost Breakdown Row Skeleton -->
          <div class="grid grid-cols-4 gap-4 text-sm border-t pt-4 mb-4">
            <div class="space-y-2">
              <Skeleton class="h-3 w-full" />
              <Skeleton class="h-4 w-2/3" />
            </div>
            <div class="space-y-2">
              <Skeleton class="h-3 w-full" />
              <Skeleton class="h-4 w-2/3" />
            </div>
            <div class="space-y-2">
              <Skeleton class="h-3 w-full" />
              <Skeleton class="h-4 w-2/3" />
            </div>
            <div class="space-y-2">
              <Skeleton class="h-3 w-full" />
              <Skeleton class="h-4 w-2/3" />
            </div>
          </div>

          <!-- Dimensions Row Skeleton -->
          <div class="grid grid-cols-4 gap-4 text-sm">
            <div class="space-y-2">
              <Skeleton class="h-3 w-full" />
              <Skeleton class="h-4 w-2/3" />
            </div>
            <div class="space-y-2">
              <Skeleton class="h-3 w-full" />
              <Skeleton class="h-4 w-2/3" />
            </div>
            <div class="space-y-2">
              <Skeleton class="h-3 w-full" />
              <Skeleton class="h-4 w-2/3" />
            </div>
            <div class="space-y-2">
              <Skeleton class="h-3 w-full" />
              <Skeleton class="h-4 w-2/3" />
            </div>
          </div>

          <!-- Overlay text -->
          <div class="absolute inset-0 flex items-center justify-center bg-background/60 backdrop-blur-[2px]">
            <div class="text-center">
              <p class="text-sm font-medium text-muted-foreground">Enter product details to see</p>
              <p class="text-lg font-semibold">Product Summary</p>
            </div>
          </div>
        </div>
      </div>
    </CardContent>
    <CardFooter class="flex gap-2">
      <Dialog>
        <DialogTrigger asChild>
          <Button id="product-dialog-trigger" class="flex-1">Enter Product Details</Button>
        </DialogTrigger>
        <DialogContent class="sm:max-w-[600px] max-h-[90vh]" animationDuration={200}>
          <form id="product-form" method="dialog" class="flex flex-col gap-4">
            <DialogHeader>
              <DialogTitle>Product Information</DialogTitle>
              <DialogDescription>
                Enter your product details to calculate Amazon FBA fees and profitability.
              </DialogDescription>
            </DialogHeader>
            
            <div class="grid gap-6 py-4 px-1">
              <!-- Basic Info -->
              <div class="space-y-4">
                <h4 class="text-sm font-medium">Basic Information</h4>
                <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div class="space-y-2">
                    <Label for="product-name">Product Name</Label>
                    <Input id="product-name" name="name" placeholder="Enter product name" required />
                  </div>
                  <div class="space-y-2">
                    <Label for="category">Category</Label>
                    <Select id="category" name="category">
                      <SelectTrigger class="w-full">
                        <SelectValue placeholder="Select category" />
                      </SelectTrigger>
                      <SelectContent class="w-full min-w-[200px]">
                        <SelectGroup>
                          <SelectLabel>Product Categories</SelectLabel>
                          <SelectItem value="electronics">Electronics</SelectItem>
                          <SelectItem value="home-kitchen">Home & Kitchen</SelectItem>
                          <SelectItem value="clothing">Clothing & Accessories</SelectItem>
                          <SelectItem value="books">Books</SelectItem>
                          <SelectItem value="toys-games">Toys & Games</SelectItem>
                          <SelectItem value="sports">Sports & Outdoors</SelectItem>
                          <SelectItem value="beauty">Beauty & Personal Care</SelectItem>
                          <SelectSeparator />
                          <SelectItem value="other">Other</SelectItem>
                        </SelectGroup>
                      </SelectContent>
                    </Select>
                  </div>
                </div>
                <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div class="space-y-2">
                    <Label for="selling-price">Selling Price ($)</Label>
                    <Input type="number" id="selling-price" name="sellingPrice" placeholder="0" step="0.01" min="0" inputmode="decimal" required />
                  </div>
                  <div class="space-y-2">
                    <Label for="cost-of-goods">Product Cost ($)</Label>
                    <Input type="number" id="cost-of-goods" name="costOfGoods" placeholder="0" step="0.01" min="0" inputmode="decimal" required />
                    <p class="text-xs text-muted-foreground">Cost to manufacture/purchase the product</p>
                  </div>
                </div>
                <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div class="space-y-2">
                    <Label for="unit-shipping-cost">Unit Shipping Cost ($)</Label>
                    <Input type="number" id="unit-shipping-cost" name="unitShippingCost" placeholder="0" step="0.01" min="0" inputmode="decimal" />
                    <p class="text-xs text-muted-foreground">Per-unit cost to ship from manufacturer</p>
                  </div>
                  <div class="space-y-2">
                    <Label for="fba-shipping-cost">FBA Shipping Cost ($)</Label>
                    <Input type="number" id="fba-shipping-cost" name="fbaShippingCost" placeholder="0" step="0.01" min="0" inputmode="decimal" />
                    <p class="text-xs text-muted-foreground">Total cost to ship batch to Amazon warehouse</p>
                  </div>
                </div>
              </div>

              <!-- Dimensions -->
              <div class="space-y-4">
                <div class="flex items-center justify-between">
                  <h4 class="text-sm font-medium">Product Dimensions</h4>
                  <div class="flex items-center gap-2">
                    <Label for="unit-toggle" class="text-xs font-medium">
                      Imperial Units
                    </Label>
                    <Switch id="unit-toggle" />
                  </div>
                </div>
                <div id="unit-display" class="text-xs text-muted-foreground mb-2">
                  Currently: Metric (cm/kg)
                </div>
                <div class="grid grid-cols-2 md:grid-cols-4 gap-4">
                  <div class="space-y-2">
                    <Label for="length" id="length-label">Length (cm)</Label>
                    <Input type="number" id="length" name="length" placeholder="0" step="0.1" min="0" inputmode="decimal" required />
                  </div>
                  <div class="space-y-2">
                    <Label for="width" id="width-label">Width (cm)</Label>
                    <Input type="number" id="width" name="width" placeholder="0" step="0.1" min="0" inputmode="decimal" required />
                  </div>
                  <div class="space-y-2">
                    <Label for="height" id="height-label">Height (cm)</Label>
                    <Input type="number" id="height" name="height" placeholder="0" step="0.1" min="0" inputmode="decimal" required />
                  </div>
                  <div class="space-y-2">
                    <Label for="weight" id="weight-label">Weight (kg)</Label>
                    <Input type="number" id="weight" name="weight" placeholder="0" step="0.001" min="0" inputmode="decimal" required />
                  </div>
                </div>
              </div>

              <!-- Inventory Planning -->
              <div class="space-y-4">
                <h4 class="text-sm font-medium">Inventory Planning</h4>
                <div class="grid grid-cols-1 gap-4">
                  <div class="space-y-2">
                    <Label for="average-units">Average Units in FBA</Label>
                    <Input type="number" id="average-units" name="averageUnits" placeholder="100" value="100" min="1" inputmode="numeric" />
                    <p class="text-xs text-muted-foreground">How many units do you plan to keep in stock?</p>
                  </div>
                </div>
              </div>

              <!-- ROI Timeline Planning -->
              <div class="space-y-4">
                <h4 class="text-sm font-medium">ROI Timeline Planning</h4>
                <div class="grid grid-cols-1 gap-4">
                  <div class="space-y-2">
                    <Label for="initial-order-qty">Initial Order Quantity</Label>
                    <Input type="number" id="initial-order-qty" name="initialOrderQty" placeholder="500" value="500" min="1" inputmode="numeric" />
                    <p class="text-xs text-muted-foreground">How many units will you order initially?</p>
                  </div>
                </div>
              </div>
            </div>
            
            <DialogFooter>
              <DialogClose asChild>
                <Button type="button" variant="outline">Cancel</Button>
              </DialogClose>
              <Button type="submit">Calculate Profit</Button>
            </DialogFooter>
          </form>
        </DialogContent>
      </Dialog>
      
      <!-- Save Button (shown only when product is calculated) -->
      <Button id="save-product-btn" variant="outline" class="hidden">
        <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7H5a2 2 0 00-2 2v9a2 2 0 002 2h14a2 2 0 002-2V9a2 2 0 00-2-2h-3m-1 4l-3 3m0 0l-3-3m3 3V4"/>
        </svg>
        Save
      </Button>
      
      <!-- Saved Products Dialog -->
      <Dialog>
        <DialogTrigger asChild>
          <Button id="load-product-btn" variant="outline">
            <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 19a2 2 0 01-2-2V7a2 2 0 012-2h4l2 2h4a2 2 0 012 2v1M5 19h14a2 2 0 002-2v-5a2 2 0 00-2-2H9a2 2 0 00-2 2v5a2 2 0 01-2 2z"/>
            </svg>
            Saved Products
            <span id="saved-count" class="ml-1 px-1.5 py-0.5 text-xs bg-muted rounded-full hidden">0</span>
          </Button>
        </DialogTrigger>
        <DialogContent class="sm:max-w-[600px] max-h-[90vh]" animationDuration={200}>
          <DialogHeader>
            <DialogTitle>Saved Products</DialogTitle>
            <DialogDescription>
              Load a previously saved product or manage your saved calculations.
            </DialogDescription>
          </DialogHeader>
          
          <div class="py-4">
            <div id="saved-products-list" class="space-y-3 max-h-[500px] overflow-y-auto">
              <!-- Saved products will be populated here with accordion styling -->
            </div>
            
            <div id="no-saved-products" class="text-center py-8 text-muted-foreground">
              <svg class="w-12 h-12 mx-auto mb-4 text-muted-foreground/50" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 13h6m-3-3v6m5 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"/>
              </svg>
              <p class="font-medium">No saved products yet</p>
              <p class="text-sm">Calculate and save a product to see it here</p>
            </div>
          </div>
          
          <DialogFooter>
            <div class="flex justify-between w-full">
              <Button id="clear-all-products" variant="error" size="sm" class="hidden">
                Clear All
              </Button>
              <DialogClose asChild>
                <Button variant="outline">Close</Button>
              </DialogClose>
            </div>
          </DialogFooter>
        </DialogContent>
      </Dialog>
    </CardFooter>
  </Card>

  <!-- Results Section -->
  <div class="space-y-6">
    <!-- Top Row: Profit Analysis and Success Criteria -->
    <div class="grid grid-cols-1 lg:grid-cols-2 gap-6">
      <!-- Profit Analysis Card -->
      <Card class="w-full">
        <CardHeader>
          <CardTitle>Profit Analysis</CardTitle>
          <CardDescription>Comprehensive FBA calculations</CardDescription>
        </CardHeader>
        <CardContent>
          <div id="results-container" class="space-y-4">
            <!-- Loading state with overlay text -->
            <div class="relative">
              <div class="flex flex-col space-y-3">
                <Skeleton class="h-[40px] w-full rounded-lg" />
                <div class="space-y-2">
                  <Skeleton class="h-4 w-full" />
                  <Skeleton class="h-4 w-3/4" />
                </div>
                <div class="space-y-2">
                  <Skeleton class="h-4 w-full" />
                  <Skeleton class="h-4 w-2/3" />
                </div>
                <div class="grid grid-cols-2 gap-3">
                  <Skeleton class="h-[60px] w-full rounded-lg" />
                  <Skeleton class="h-[60px] w-full rounded-lg" />
                </div>
              </div>
              <!-- Overlay text -->
              <div class="absolute inset-0 flex items-center justify-center bg-background/60 backdrop-blur-[2px]">
                <div class="text-center">
                  <p class="text-sm font-medium text-muted-foreground">Enter product details to see</p>
                  <p class="text-lg font-semibold">Profit Analysis</p>
                </div>
              </div>
            </div>
          </div>
        </CardContent>
      </Card>

      <!-- Success Criteria Card -->
      <Card class="w-full">
        <CardHeader>
          <CardTitle>Success Criteria</CardTitle>
          <CardDescription>FBA viability assessment</CardDescription>
        </CardHeader>
        <CardContent>
          <div id="criteria-container" class="space-y-3">
            <!-- Loading state with overlay text -->
            <div class="relative">
              <div class="flex flex-col space-y-3">
                <Skeleton class="h-[80px] w-full rounded-lg" />
                <div class="space-y-3">
                  <div class="flex items-center space-x-3">
                    <Skeleton class="h-3 w-3 rounded-full flex-shrink-0" />
                    <div class="flex-1 space-y-2">
                      <Skeleton class="h-4 w-3/4" />
                      <Skeleton class="h-3 w-1/2" />
                    </div>
                  </div>
                  <div class="flex items-center space-x-3">
                    <Skeleton class="h-3 w-3 rounded-full flex-shrink-0" />
                    <div class="flex-1 space-y-2">
                      <Skeleton class="h-4 w-2/3" />
                      <Skeleton class="h-3 w-1/3" />
                    </div>
                  </div>
                  <div class="flex items-center space-x-3">
                    <Skeleton class="h-3 w-3 rounded-full flex-shrink-0" />
                    <div class="flex-1 space-y-2">
                      <Skeleton class="h-4 w-3/5" />
                      <Skeleton class="h-3 w-2/5" />
                    </div>
                  </div>
                </div>
              </div>
              <!-- Overlay text -->
              <div class="absolute inset-0 flex items-center justify-center bg-background/60 backdrop-blur-[2px]">
                <div class="text-center">
                  <p class="text-sm font-medium text-muted-foreground">Enter product details to see</p>
                  <p class="text-lg font-semibold">Success Criteria</p>
                </div>
              </div>
            </div>
          </div>
        </CardContent>
      </Card>
    </div>

    <!-- Bottom Row: Full-width ROI Timeline Card -->
    <Card class="w-full">
      <CardHeader>
        <CardTitle>ROI Timeline</CardTitle>
        <CardDescription>Investment recovery timeline and planning</CardDescription>
      </CardHeader>
      <CardContent>
        <div id="timeline-container" class="space-y-3">
          <!-- Loading state with overlay text -->
          <div class="relative">
            <div class="flex flex-col space-y-4">
              <!-- Slider skeleton -->
              <div class="space-y-2 p-4 bg-muted/30 rounded-lg">
                <Skeleton class="h-4 w-1/3" />
                <Skeleton class="h-2 w-full rounded-lg" />
                <div class="flex justify-between">
                  <Skeleton class="h-3 w-8" />
                  <Skeleton class="h-3 w-16" />
                  <Skeleton class="h-3 w-8" />
                </div>
              </div>
              
              <!-- Alert skeleton -->
              <Skeleton class="h-[80px] w-full rounded-lg" />
              
              <!-- Cards skeleton -->
              <div class="space-y-3">
                <Skeleton class="h-[60px] w-full rounded-lg" />
              </div>
              
              <!-- Milestones skeleton -->
              <div class="border-t pt-3 space-y-2">
                <Skeleton class="h-4 w-20" />
                <div class="space-y-2">
                  <Skeleton class="h-3 w-full" />
                  <Skeleton class="h-3 w-full" />
                  <Skeleton class="h-3 w-full" />
                </div>
              </div>
            </div>
            <!-- Overlay text -->
            <div class="absolute inset-0 flex items-center justify-center bg-background/60 backdrop-blur-[2px]">
              <div class="text-center">
                <p class="text-sm font-medium text-muted-foreground">Enter product details to see</p>
                <p class="text-lg font-semibold">ROI Timeline</p>
              </div>
            </div>
          </div>
        </div>
      </CardContent>
    </Card>
  </div>
</div>

<script>
  import { 
    calculateAmazonFees, 
    calculateProfitability, 
    evaluateSuccessCriteria, 
    calculateFBASizeTier, 
    cmToInches, 
    kgToPounds,
    formatCurrency,
    formatSmallCurrency
  } from '../utils/fbaCalculations';
  import { getSavedProducts, saveProduct, deleteProduct, clearAllProducts, getCategoryDisplayName, type SavedProduct } from '../utils/productStorage';
  import { createUnitToggleHandler, type UnitToggleElements } from '../utils/unitToggle';
  import type { ProductData } from '../types/calculator';
  import type { SwitchChangeEvent } from "@/components/starwind/switch";

  document.addEventListener('DOMContentLoaded', function() {
    console.log('🚀 DOM Content Loaded - Calculator initializing');

    // 1. DECLARE ALL VARIABLES FIRST
    const form = document.getElementById('product-form') as HTMLFormElement;
    const resultsContainer = document.getElementById('results-container')!;
    const criteriaContainer = document.getElementById('criteria-container')!;
    const timelineContainer = document.getElementById('timeline-container')!;
    const unitToggle = document.getElementById('unit-toggle') as HTMLElement;
    const triggerButton = document.getElementById('product-dialog-trigger') as HTMLButtonElement;
    
    // Summary elements
    const productSummary = document.getElementById('product-summary')!;
    const productSkeleton = document.getElementById('product-skeleton')!;

    // Local storage elements
    const saveProductBtn = document.getElementById('save-product-btn')!;
    const loadProductBtn = document.getElementById('load-product-btn')!;
    const savedProductsList = document.getElementById('saved-products-list')!;
    const noSavedProducts = document.getElementById('no-saved-products')!;
    const clearAllBtn = document.getElementById('clear-all-products')!;
    const savedCount = document.getElementById('saved-count')!;
    const saveToast = document.getElementById('save-toast')!;

    // Unit labels
    const lengthLabel = document.getElementById('length-label') as HTMLLabelElement;
    const widthLabel = document.getElementById('width-label') as HTMLLabelElement;
    const heightLabel = document.getElementById('height-label') as HTMLLabelElement;
    const weightLabel = document.getElementById('weight-label') as HTMLLabelElement;

    let currentProductData: ProductData | null = null;

    // Initialize unit toggle
    const unitToggleElements: UnitToggleElements = {
      unitDisplay: document.getElementById('unit-display') as HTMLElement,
      lengthLabel,
      widthLabel,
      heightLabel,
      weightLabel,
      lengthInput: document.getElementById('length') as HTMLInputElement,
      widthInput: document.getElementById('width') as HTMLInputElement,
      heightInput: document.getElementById('height') as HTMLInputElement,
      weightInput: document.getElementById('weight') as HTMLInputElement,
    };

    const unitToggleHandler = createUnitToggleHandler(unitToggleElements);

    // 2. DEFINE ALL FUNCTIONS NEXT
    function initializeButtonVisibility(): void {
      console.log('🔍 Initializing button visibility');
      
      // Use !hidden for both buttons (specificity issue with Starwind components)
      saveProductBtn.classList.add('!hidden');
      
      const savedProducts = getSavedProducts();
      if (savedProducts.length === 0) {
        loadProductBtn.classList.add('!hidden'); // Use !hidden here too
        console.log('🔍 No saved products - hiding load button');
      } else {
        loadProductBtn.classList.remove('!hidden');
        console.log('🔍 Found saved products - showing load button');
      }
    }

    function loadProduct(product: SavedProduct): void {
      try {
        (document.getElementById('product-name') as HTMLInputElement).value = product.name;
        (document.getElementById('selling-price') as HTMLInputElement).value = product.sellingPrice.toString();
        (document.getElementById('cost-of-goods') as HTMLInputElement).value = product.costOfGoods.toString();
        (document.getElementById('unit-shipping-cost') as HTMLInputElement).value = (product.unitShippingCost || 0).toString();
        (document.getElementById('fba-shipping-cost') as HTMLInputElement).value = (product.fbaShippingCost || 0).toString();
        (document.getElementById('length') as HTMLInputElement).value = product.dimensions.length.toString();
        (document.getElementById('width') as HTMLInputElement).value = product.dimensions.width.toString();
        (document.getElementById('height') as HTMLInputElement).value = product.dimensions.height.toString();
        (document.getElementById('weight') as HTMLInputElement).value = product.dimensions.weight.toString();
        
        const categorySelect = document.getElementById('category');
        if (categorySelect) {
          categorySelect.setAttribute('data-value', product.category);
        }

        currentProductData = product;
        updateProductSummary(product);
        calculateResults();
        
        const closeBtn = document.querySelector('[data-dialog-close]') as HTMLElement;
        closeBtn?.click();
      } catch (error) {
        console.error('Error loading product:', error);
        alert('Failed to load product');
      }
    }

    function updateProductSummary(productData: ProductData) {
      console.log('📋 updateProductSummary started with:', productData);
      
      const unitState = unitToggleHandler.getUnitState();
      console.log('📏 Unit state in summary:', unitState);
      const totalCost = productData.costOfGoods + (productData.unitShippingCost || 0) + (productData.fbaShippingCost || 0);

      document.getElementById('summary-name')!.textContent = productData.name;
      document.getElementById('summary-price')!.textContent = `$${productData.sellingPrice.toFixed(2)}`;
      document.getElementById('summary-cost')!.textContent = `$${productData.costOfGoods.toFixed(2)}`;
      document.getElementById('summary-unit-shipping')!.textContent = `$${(productData.unitShippingCost || 0).toFixed(2)}`;
      document.getElementById('summary-fba-shipping')!.textContent = `$${(productData.fbaShippingCost || 0).toFixed(2)}`;
      document.getElementById('summary-category')!.textContent = getCategoryDisplayName(productData.category);
      document.getElementById('summary-total-cost')!.textContent = `$${totalCost.toFixed(2)}`;
      
      document.getElementById('summary-length')!.textContent = `${productData.dimensions.length}${unitState.unitSuffix.length}`;
      document.getElementById('summary-width')!.textContent = `${productData.dimensions.width}${unitState.unitSuffix.length}`;
      document.getElementById('summary-height')!.textContent = `${productData.dimensions.height}${unitState.unitSuffix.length}`;
      document.getElementById('summary-weight')!.textContent = `${productData.dimensions.weight}${unitState.unitSuffix.weight}`;

      // Show summary, hide skeleton
      productSummary.classList.remove('hidden'); // Regular hidden works fine
      productSkeleton.classList.add('hidden'); // Regular hidden works fine
      triggerButton.textContent = 'Edit Product Details';

      // NOW show save button - product details have been entered
      console.log('🔍 Product details entered - showing save button');
      saveProductBtn.classList.remove('!hidden'); // Use !hidden only for save button

      console.log('📋 updateProductSummary completed');
    }

    function updateSavedProductsUI(): void {
      savedProductsList.innerHTML = '';
      const savedProducts = getSavedProducts();
      const productCount = savedProducts.length;

      savedCount.textContent = productCount.toString();
      savedCount.classList.toggle('hidden', productCount === 0); // Regular hidden works fine for span

      // Show/hide load products button based on saved products count
      if (productCount === 0) {
        loadProductBtn.classList.add('!hidden'); // Use !hidden here too
        console.log('🔍 No saved products - hiding load button');
      } else {
        loadProductBtn.classList.remove('!hidden'); // Use !hidden here too
        console.log('🔍 Found saved products - showing load button');
      }

      clearAllBtn.classList.toggle('hidden', productCount === 0); // Regular hidden works fine
      noSavedProducts.classList.toggle('hidden', productCount > 0); // Regular hidden works fine

      // ...rest of existing code...
      savedProducts.forEach(product => {
        const productItem = document.createElement('div');
        productItem.className = 'p-4 rounded-lg bg-muted flex flex-col gap-2';
        
        const unitShippingCost = product.unitShippingCost ?? 0;
        const fbaShippingCost = product.fbaShippingCost ?? 0;
        const totalCost = product.costOfGoods + unitShippingCost + fbaShippingCost;
        
        productItem.innerHTML = `
          <div class="flex justify-between items-center">
            <h5 class="font-medium text-lg" title="${product.name}">${product.name}</h5>
            <div class="text-xs ${product.category === 'other' ? 'text-red-600 dark:text-red-400' : 'text-green-600 dark:text-green-400'}">
              ${product.category === 'other' ? '⚠️' : '✔️'} ${getCategoryDisplayName(product.category)}
            </div>
          </div>
          <div class="text-sm text-muted-foreground">
            Selling Price: <span class="font-semibold text-foreground">$${product.sellingPrice.toFixed(2)}</span>
          </div>
          <div class="text-sm text-muted-foreground">
            Total Cost: <span class="font-semibold text-foreground">$${totalCost.toFixed(2)}</span>
          </div>
          <div class="flex flex-wrap gap-2">
            <span class="text-xs px-2 py-1 rounded-full bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200">${calculateFBASizeTier(product.dimensions, true).replace('_', ' ')}</span>
            <span class="text-xs px-2 py-1 rounded-full ${product.dimensions.weight > 1 ? 'bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200' : 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200'}">
              ${product.dimensions.weight.toFixed(2)} ${product.dimensions.weight > 1 ? 'lbs' : 'kg'}
            </span>
          </div>
          <div class="flex justify-end gap-2">
            <button class="inline-flex items-center justify-center rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-outline disabled:pointer-events-none disabled:opacity-50 border border-input bg-background hover:bg-accent hover:text-accent-foreground h-9 px-3" id="load-product-${product.id}">
              <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13h6m-3-3v6m5 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"/>
              </svg>
              Load Product
            </button>
            <button class="inline-flex items-center justify-center rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-outline disabled:pointer-events-none disabled:opacity-50 border border-input bg-background hover:bg-accent hover:text-accent-foreground h-9 px-3 text-red-600 hover:text-red-700 hover:bg-red-50 dark:hover:bg-red-950" id="delete-product-${product.id}">
              <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"/>
              </svg>
              Delete
            </button>
          </div>
        `;

        savedProductsList.appendChild(productItem);

        document.getElementById(`load-product-${product.id}`)!.addEventListener('click', () => {
          loadProduct(product);
        });
        document.getElementById(`delete-product-${product.id}`)!.addEventListener('click', () => {
          handleDeleteProduct(product.id);
        });
      });
    }

    function handleSaveProduct(): void {
      if (currentProductData) {
        try {
          const currentCalculations = getCurrentCalculations();
          saveProduct(currentProductData, currentCalculations);
          updateSavedProductsUI(); // This will show the load button if it was hidden
          showSaveToast();
        } catch (error) {
          console.error('Error saving product:', error);
          alert('Failed to save product. Storage might be full.');
        }
      }
    }
    
    function handleDeleteProduct(id: string): void {
      try {
        deleteProduct(id);
        updateSavedProductsUI(); // This will hide the load button if no products remain
      } catch (error) {
        console.error('Error deleting product:', error);
      }
    }
    
    function handleClearAllProducts(): void {
      if (confirm('Are you sure you want to delete all saved products? This cannot be undone.')) {
        clearAllProducts();
        updateSavedProductsUI(); // This will hide the load button since no products remain
      }
    }

    function calculateResults() {
      console.log('🔍 =========================');
      console.log('🔍 Starting calculateResults()');
      console.log('🔍 =========================');
      
      if (!currentProductData) {
        console.error('❌ No currentProductData available');
        return;
      }

      console.log('✅ Current product data:', currentProductData);

      const unitState = unitToggleHandler.getUnitState();
      console.log('📏 Unit state:', unitState);
      
      const useMetric = !unitState.isImperialUnits;
      console.log('📏 Using metric units:', useMetric);
      
      const averageUnitsElement = document.getElementById('average-units') as HTMLInputElement;
      console.log('📦 Average units element:', averageUnitsElement);
      console.log('📦 Average units value:', averageUnitsElement?.value);
      
      const averageUnits = averageUnitsElement ? parseInt(averageUnitsElement.value) || 100 : 100;
      console.log('📦 Final average units:', averageUnits);
      
      console.log('💰 Calculating Amazon fees...');
      const fees = calculateAmazonFees(currentProductData, useMetric, { averageUnitsStored: averageUnits });
      console.log('💰 Fees calculated:', fees);
      
      console.log('📊 Calculating profitability...');
      const profitability = calculateProfitability(currentProductData, fees);
      console.log('📊 Profitability calculated:', profitability);
      
      console.log('✅ Evaluating success criteria...');
      const criteria = evaluateSuccessCriteria(currentProductData, profitability, useMetric);
      console.log('✅ Criteria evaluated:', criteria);
      
      console.log('📏 Calculating FBA size tier...');
      const sizeTier = calculateFBASizeTier(currentProductData.dimensions, useMetric);
      console.log('📏 Size tier calculated:', sizeTier);

      const adSpend = Math.floor(currentProductData.sellingPrice * 0.20 * 100) / 100;
      console.log('📢 Ad spend calculated:', adSpend);
      
      const breakEvenWithAds = profitability.breakEvenPrice + adSpend;
      console.log('💰 Break even with ads:', breakEvenWithAds);

      const initialOrderQtyElement = document.getElementById('initial-order-qty') as HTMLInputElement;
      console.log('📦 Initial order qty element:', initialOrderQtyElement);
      console.log('📦 Initial order qty value:', initialOrderQtyElement?.value);
      
      const initialOrderQty = parseInt(initialOrderQtyElement?.value || '500');
      console.log('📦 Final initial order qty:', initialOrderQty);
      
      const monthlySales = 100;
      console.log('📈 Monthly sales (hardcoded):', monthlySales);
      
      const unitCost = currentProductData.costOfGoods + (currentProductData.unitShippingCost || 0);
      console.log('💵 Unit cost:', unitCost);
      
      const initialInvestment = initialOrderQty * unitCost;
      console.log('💰 Initial investment:', initialInvestment);
      
      const fbaShippingPerUnit = (currentProductData.fbaShippingCost || 0) / initialOrderQty;
      console.log('🚚 FBA shipping per unit:', fbaShippingPerUnit);
      
      const totalUnitCost = unitCost + fbaShippingPerUnit;
      console.log('💵 Total unit cost:', totalUnitCost);
      
      const monthlyProfitPerUnit = (profitability.netProfit - adSpend);
      console.log('📈 Monthly profit per unit:', monthlyProfitPerUnit);
      
      const monthlyProfit = monthlySales * monthlyProfitPerUnit;
      console.log('📈 Monthly profit total:', monthlyProfit);
      
      const breakEvenMonths = initialInvestment / monthlyProfit;
      console.log('📅 Break even months:', breakEvenMonths);
      
      const breakEvenDays = Math.ceil(breakEvenMonths * 30);
      console.log('📅 Break even days:', breakEvenDays);
      
      const inventoryRunwayMonths = initialOrderQty / monthlySales;
      console.log('📦 Inventory runway months:', inventoryRunwayMonths);
      
      const inventoryRunwayDays = Math.ceil(inventoryRunwayMonths * 30);
      console.log('📦 Inventory runway days:', inventoryRunwayDays);

      console.log('🐛 Generating debug content...');
      const debugContent = useMetric ? 
        `<span class="font-medium">Imperial equivalent:</span> ${(cmToInches(currentProductData.dimensions.length)).toFixed(2)}" × ${(cmToInches(currentProductData.dimensions.width)).toFixed(2)}" × ${(cmToInches(currentProductData.dimensions.height)).toFixed(2)}" (${(kgToPounds(currentProductData.dimensions.weight)).toFixed(2)} lbs)` :
        `<span class="font-medium">Metric equivalent:</span> ${(currentProductData.dimensions.length * 2.54).toFixed(1)}cm × ${(currentProductData.dimensions.width * 2.54).toFixed(1)}cm × ${(currentProductData.dimensions.height * 2.54).toFixed(1)}cm (${(currentProductData.dimensions.weight * 0.453592).toFixed(3)}kg)`;

      console.log('🐛 Debug content:', debugContent);

      const debugInfoElement = document.getElementById('debug-info')!;
      console.log('🐛 Debug info element:', debugInfoElement);
      
      debugInfoElement.innerHTML = debugContent;
      debugInfoElement.classList.remove('hidden');
      console.log('✅ Debug info updated and shown');

      console.log('📊 Rendering results container...');
      console.log('📊 Results container element:', resultsContainer);

      // Render all results...
      resultsContainer.innerHTML = `
        <div class="space-y-4">
          <div class="border-b border-border pb-3">
            <h4 class="font-medium text-sm text-muted-foreground uppercase tracking-wide">Size Tier</h4>
            <p class="text-lg font-semibold">${sizeTier.replace('_', ' ')}</p>
          </div>
          <div class="pt-3">
            <h4 class="font-medium text-sm text-muted-foreground mb-2">Fee Breakdown</h4>
            <div class="space-y-1 text-sm">
              <div class="flex justify-between">
                <span>Referral Fee:</span>
                <span>${formatCurrency(fees.referralFee)}</span>
              </div>
              <div class="flex justify-between">
                <span>Fulfillment Fee:</span>
                <span>${formatCurrency(fees.fulfillmentFee)}</span>
              </div>
              <div class="flex justify-between">
                <span>Storage Fee (per unit/month):</span>
                <span>${formatSmallCurrency(fees.storageMonthlyFee)}</span>
              </div>
              <div class="flex justify-between text-xs text-muted-foreground">
                <span>Total for ${averageUnits} units:</span>
                <span>${formatCurrency(fees.storageMonthlyFee * averageUnits)}</span>
              </div>
              <div class="flex justify-between">
                <span>Ad Spend (20%):</span>
                <span>${formatCurrency(adSpend)}</span>
              </div>
              <div class="flex justify-between font-semibold border-t border-border pt-1">
                <span>Total Fees + Ads:</span>
                <span>${formatCurrency(profitability.totalFees + adSpend)}</span>
              </div>
            </div>
          </div>
          <div class="grid grid-cols-2 gap-3 border-t border-border pt-3">
            <div>
              <h4 class="font-medium text-sm text-muted-foreground">Net Profit (After Ads)</h4>
              <p class="text-lg font-semibold ${(profitability.netProfit - adSpend) >= 0 ? 'text-green-600 dark:text-green-400' : 'text-red-600 dark:text-red-400'}">
                ${formatCurrency(profitability.netProfit - adSpend)}
              </p>
            </div>
            <div>
              <h4 class="font-medium text-sm text-muted-foreground">Profit Margin (After Ads)</h4>
              <p class="text-lg font-semibold ${((profitability.netProfit - adSpend) / currentProductData.sellingPrice * 100) >= 15 ? 'text-green-600 dark:text-green-400' : 'text-red-600 dark:text-red-400'}">
                ${(((profitability.netProfit - adSpend) / currentProductData.sellingPrice) * 100).toFixed(1)}%
              </p>
            </div>
          </div>
          <div class="grid grid-cols-2 gap-3">
            <div>
              <h4 class="font-medium text-sm text-muted-foreground">ROI (After Ads)</h4>
              <p class="text-lg font-semibold">${(((profitability.netProfit - adSpend) / profitability.totalCosts) * 100).toFixed(1)}%</p>
            </div>
            <div>
              <h4 class="font-medium text-sm text-muted-foreground">Markup (After Ads)</h4>
              <p class="text-lg font-semibold">${(((profitability.netProfit - adSpend) / profitability.totalCosts) * 100).toFixed(1)}%</p>
            </div>
          </div>
          <div class="border-t border-border pt-3">
            <div class="grid grid-cols-2 gap-3">
              <div>
                <h4 class="font-medium text-sm text-muted-foreground">Break-even Price</h4>
                <p class="text-lg font-semibold">${formatCurrency(profitability.breakEvenPrice)}</p>
                <p class="text-xs text-muted-foreground">Before ads</p>
              </div>
              <div>
                <h4 class="font-medium text-sm text-muted-foreground">Break-even + Ads</h4>
                <p class="text-lg font-semibold">${formatCurrency(breakEvenWithAds)}</p>
                <p class="text-xs text-muted-foreground">Including 20% ad spend</p>
              </div>
            </div>
          </div>
        </div>
      `;
      
      console.log('✅ Results container HTML updated');
      
      // Render criteria and timeline (keeping existing code)...
      console.log('✅ Starting criteria rendering...');
      const passedCount = criteria.filter(c => c.passed).length;
      console.log('✅ Criteria passed count:', passedCount);
      
      let colorScheme;
      if (passedCount === 4) {
        colorScheme = { bg: 'bg-green-50 dark:bg-green-950', text: 'text-green-700 dark:text-green-300', border: 'border-green-500 dark:border-green-600' };
      } else if (passedCount === 3) {
        colorScheme = { bg: 'bg-blue-50 dark:bg-blue-950', text: 'text-blue-700 dark:text-blue-300', border: 'border-blue-500 dark:border-blue-600' };
      } else if (passedCount === 2) {
        colorScheme = { bg: 'bg-yellow-50 dark:bg-yellow-950', text: 'text-yellow-700 dark:text-yellow-300', border: 'border-yellow-500 dark:border-yellow-600' };
      } else if (passedCount === 1) {
        colorScheme = { bg: 'bg-orange-50 dark:bg-orange-950', text: 'text-orange-700 dark:text-orange-300', border: 'border-orange-500 dark:border-orange-600' };
      } else {
        colorScheme = { bg: 'bg-red-50 dark:bg-red-950', text: 'text-red-700 dark:text-red-300', border: 'border-red-500 dark:border-red-600' };
      }
      
      console.log('✅ Color scheme selected:', colorScheme);
      console.log('✅ Criteria container element:', criteriaContainer);

      criteriaContainer.innerHTML = `
        <div class="space-y-4">
          <div class="text-center p-4 rounded-lg border-2 ${colorScheme.bg} ${colorScheme.text} ${colorScheme.border}">
            <p class="text-lg font-semibold">${passedCount}/4 Criteria Met</p>
            <p class="text-sm">${
              passedCount === 4 ? 'Perfect FBA candidate!' : 
              passedCount === 3 ? 'Excellent FBA candidate!' : 
              passedCount === 2 ? 'Good potential' : 
              passedCount === 1 ? 'Needs improvement' : 
              'Not recommended for FBA'
            }</p>
          </div>
          ${criteria.map(criterion => `
            <div class="flex items-center space-x-3">
              <div class="flex-shrink-0">
                ${criterion.passed 
                  ? '<div class="w-3 h-3 bg-green-500 dark:bg-green-400 rounded-full"></div>' 
                  : '<div class="w-3 h-3 bg-red-500 dark:bg-red-400 rounded-full"></div>'
                }
              </div>
              <div class="flex-1">
                <p class="text-base font-semibold text-foreground">${criterion.label}</p>
                <p class="text-sm text-muted-foreground mt-1">${criterion.value} (${criterion.threshold})</p>
                <p class="text-sm text-muted-foreground">${criterion.message}</p>
              </div>
            </div>
          `).join('')}
        </div>
      `;
      
      console.log('✅ Criteria container HTML updated');

      // Render timeline with slider (keeping existing timeline code)...
      console.log('📈 Starting timeline rendering...');
      console.log('📈 Timeline container element:', timelineContainer);
      console.log('📈 Timeline variables for rendering:', { 
        monthlySales, 
        breakEvenDays, 
        initialOrderQty, 
        inventoryRunwayDays 
      });

      const timelineHTML = `
        <div class="space-y-4">
          <div class="space-y-2 p-4 bg-muted/30 rounded-lg">
            <label for="timeline-monthly-sales" class="block text-sm font-medium">Expected Monthly Sales</label>
            <input type="range" id="timeline-monthly-sales" min="10" max="1000" value="${monthlySales}" class="w-full h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer dark:bg-gray-700" />
            <div class="flex justify-between text-xs text-muted-foreground">
              <span>10/mo</span>
              <span id="timeline-sales-display" class="font-medium">${monthlySales} units/month</span>
              <span>1000/mo</span>
            </div>
          </div>
          <div id="breakeven-alert" class="text-center p-4 rounded-lg border ${breakEvenDays <= 90 ? 'bg-green-50 dark:bg-green-950 border-green-200 dark:border-green-800' : breakEvenDays <= 180 ? 'bg-yellow-50 dark:bg-yellow-950 border-yellow-200 dark:border-yellow-800' : 'bg-red-50 dark:bg-red-950 border-red-200 dark:border-red-800'}">
            <div id="breakeven-days" class="text-2xl font-bold ${breakEvenDays <= 90 ? 'text-green-700 dark:text-green-300' : breakEvenDays <= 180 ? 'text-yellow-700 dark:text-yellow-300' : 'text-red-700 dark:text-red-300'}">${breakEvenDays} days</div>
            <div class="text-sm text-muted-foreground">to break even</div>
          </div>
          
          <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div class="p-4 rounded-lg border bg-card">
              <h4 class="font-medium text-sm text-muted-foreground mb-2">Initial Investment</h4>
              <p class="text-2xl font-bold">${formatCurrency(initialInvestment)}</p>
              <p class="text-xs text-muted-foreground">${initialOrderQty} units × ${formatCurrency(unitCost)}</p>
            </div>
            <div class="p-4 rounded-lg border bg-card">
              <h4 class="font-medium text-sm text-muted-foreground mb-2">Monthly Profit</h4>
              <p class="text-2xl font-bold text-green-600 dark:text-green-400">${formatCurrency(monthlyProfit)}</p>
              <p class="text-xs text-muted-foreground">${monthlySales} units × ${formatCurrency(monthlyProfitPerUnit)}</p>
            </div>
          </div>
          
          <div class="p-4 rounded-lg border bg-card">
            <h4 class="font-medium text-sm text-muted-foreground mb-2">Inventory Runway</h4>
            <p class="text-lg font-bold">${inventoryRunwayDays} days</p>
            <p class="text-xs text-muted-foreground">Time before restocking needed (${inventoryRunwayMonths.toFixed(1)} months)</p>
          </div>

          <div class="border-t pt-4">
            <h4 class="font-medium text-sm text-muted-foreground mb-3">Key Milestones</h4>
            <div class="space-y-2 text-sm">
              <div class="flex justify-between">
                <span>Break even:</span>
                <span class="font-medium">${breakEvenDays} days</span>
              </div>
              <div class="flex justify-between">
                <span>Inventory depletion:</span>
                <span class="font-medium">${inventoryRunwayDays} days</span>
              </div>
              <div class="flex justify-between">
                <span>Profit after break-even:</span>
                <span class="font-medium text-green-600 dark:text-green-400">${formatCurrency((inventoryRunwayDays - breakEvenDays) / 30 * monthlyProfit)}</span>
              </div>
            </div>
          </div>
        </div>
      `;
      
      console.log('📈 Timeline HTML generated:', timelineHTML);
      
      timelineContainer.innerHTML = timelineHTML;
      console.log('✅ Timeline container HTML updated');
      
      // NOW ADD THE SLIDER EVENT LISTENER
      const timelineSalesSlider = document.getElementById('timeline-monthly-sales') as HTMLInputElement;
      const timelineSalesDisplay = document.getElementById('timeline-sales-display') as HTMLElement;
      const breakevenAlert = document.getElementById('breakeven-alert') as HTMLElement;
      const breakevenDays = document.getElementById('breakeven-days') as HTMLElement;

      if (timelineSalesSlider) {
        timelineSalesSlider.addEventListener('input', function() {
          const newMonthlySales = parseInt(this.value);
          console.log('📈 Slider changed to:', newMonthlySales);
          
          // Update display
          timelineSalesDisplay.textContent = `${newMonthlySales} units/month`;
          
          // Recalculate timeline values with new monthly sales
          const newMonthlyProfitPerUnit = (profitability.netProfit - adSpend);
          const newMonthlyProfit = newMonthlySales * newMonthlyProfitPerUnit;
          const newBreakEvenMonths = initialInvestment / newMonthlyProfit;
          const newBreakEvenDays = Math.ceil(newBreakEvenMonths * 30);
          const newInventoryRunwayMonths = initialOrderQty / newMonthlySales;
          const newInventoryRunwayDays = Math.ceil(newInventoryRunwayMonths * 30);
          
          console.log('📈 Recalculated values:', {
            newMonthlySales,
            newMonthlyProfit,
            newBreakEvenDays,
            newInventoryRunwayDays
          });
          
          // Update break-even days display
          breakevenDays.textContent = `${newBreakEvenDays} days`;
          
          // Update break-even alert styling
          breakevenAlert.className = `text-center p-4 rounded-lg border ${newBreakEvenDays <= 90 ? 'bg-green-50 dark:bg-green-950 border-green-200 dark:border-green-800' : newBreakEvenDays <= 180 ? 'bg-yellow-50 dark:bg-yellow-950 border-yellow-200 dark:border-yellow-800' : 'bg-red-50 dark:bg-red-950 border-red-200 dark:border-red-800'}`;
          
          breakevenDays.className = `text-2xl font-bold ${newBreakEvenDays <= 90 ? 'text-green-700 dark:text-green-300' : newBreakEvenDays <= 180 ? 'text-yellow-700 dark:text-yellow-300' : 'text-red-700 dark:text-red-300'}`;
          
          // Update the cards with new values
          const monthlyProfitCard = timelineContainer.querySelector('.text-green-600.dark\\:text-green-400');
          if (monthlyProfitCard) {
            monthlyProfitCard.textContent = formatCurrency(newMonthlyProfit);
          }
          
          const monthlyProfitSubtext = monthlyProfitCard?.nextElementSibling;
          if (monthlyProfitSubtext) {
            monthlyProfitSubtext.textContent = `${newMonthlySales} units × ${formatCurrency(newMonthlyProfitPerUnit)}`;
          }
          
          // Update inventory runway
          const inventoryRunwayDaysElement = timelineContainer.querySelector('p.text-lg.font-bold');
          if (inventoryRunwayDaysElement && !inventoryRunwayDaysElement.classList.contains('text-green-600')) {
            inventoryRunwayDaysElement.textContent = `${newInventoryRunwayDays} days`;
          }
          
          const inventoryRunwaySubtext = inventoryRunwayDaysElement?.nextElementSibling;
          if (inventoryRunwaySubtext) {
            inventoryRunwaySubtext.textContent = `Time before restocking needed (${newInventoryRunwayMonths.toFixed(1)} months)`;
          }
          
          // Update key milestones
          const milestones = timelineContainer.querySelectorAll('.border-t .space-y-2 .flex');
          if (milestones.length >= 3) {
            // Break even milestone
            const breakEvenMilestone = milestones[0].querySelector('.font-medium');
            if (breakEvenMilestone) {
              breakEvenMilestone.textContent = `${newBreakEvenDays} days`;
            }
            
            // Inventory depletion milestone
            const inventoryMilestone = milestones[1].querySelector('.font-medium');
            if (inventoryMilestone) {
              inventoryMilestone.textContent = `${newInventoryRunwayDays} days`;
            }
            
            // Profit after break-even milestone
            const profitMilestone = milestones[2].querySelector('.font-medium');
            if (profitMilestone) {
              profitMilestone.textContent = formatCurrency((newInventoryRunwayDays - newBreakEvenDays) / 30 * newMonthlyProfit);
            }
          }
        });
        
        console.log('✅ Timeline slider event listener added');
      }
    }

    // Add logging to form submission
    form.addEventListener('submit', function(e) {
      console.log('📝 Form submission started');
      e.preventDefault();
      
      const formData = new FormData(form);
      console.log('📝 Form data collected:', formData);
      
      const productData: ProductData = {
        name: formData.get('name') as string,
        sellingPrice: parseFloat(formData.get('sellingPrice') as string),
        costOfGoods: parseFloat(formData.get('costOfGoods') as string),
        unitShippingCost: parseFloat(formData.get('unitShippingCost') as string) || 0,
        fbaShippingCost: parseFloat(formData.get('fbaShippingCost') as string) || 0,
        category: formData.get('category') as string,
        dimensions: {
          length: parseFloat(formData.get('length') as string),
          width: parseFloat(formData.get('width') as string),
          height: parseFloat(formData.get('height') as string),
          weight: parseFloat(formData.get('weight') as string)
        }
      };

      console.log('📝 Product data parsed:', productData);

      if (!productData.name || !productData.category || 
          isNaN(productData.sellingPrice) || isNaN(productData.costOfGoods) ||
          isNaN(productData.dimensions.length) || isNaN(productData.dimensions.width) ||
          isNaN(productData.dimensions.height) || isNaN(productData.dimensions.weight)) {
        console.error('❌ Validation failed');
        alert('Please fill in all required fields');
        return;
      }

      console.log('✅ Validation passed');
      currentProductData = productData;
      console.log('✅ currentProductData set:', currentProductData);
      
      console.log('📋 Calling updateProductSummary...');
      updateProductSummary(productData);
      
      console.log('🧮 Calling calculateResults...');
      calculateResults();
    });

    unitToggle.addEventListener("starwind-switch:change", (e: Event) => {
      const event = e as SwitchChangeEvent;
      if (event.detail.switchId === "unit-toggle") {
        unitToggleHandler.setImperial(event.detail.checked);
        if (currentProductData) {
          updateProductSummary(currentProductData);
          calculateResults();
        }
      }
    });

    saveProductBtn.addEventListener('click', handleSaveProduct);
    clearAllBtn.addEventListener('click', handleClearAllProducts);

    (window as any).loadProduct = loadProduct;
    (window as any).deleteProduct = handleDeleteProduct;

    // 4. INITIALIZE
    console.log('🚀 Starting initialization...');
    
    productSkeleton.classList.remove('hidden');
    console.log('✅ Product skeleton shown');
    
    initializeButtonVisibility();
    console.log('✅ Button visibility initialized');
    
    updateSavedProductsUI();
    console.log('✅ Saved products UI updated');
    
    console.log('🚀 Calculator initialization complete!');
  });
</script>

<!-- Success Toast (positioned fixed) -->
<div id="save-toast" class="fixed top-4 right-4 z-50 hidden">
  <div class="bg-green-50 dark:bg-green-950 border border-green-200 dark:border-green-800 rounded-lg p-4 shadow-lg">
    <div class="flex items-center"></div>
      <svg class="w-5 h-5 text-green-600 dark:text-green-400 mr-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"/>
      </svg>
      <div>
        <p class="font-medium text-green-800 dark:text-green-200">Product Saved!</p>
        <p class="text-sm text-green-700 dark:text-green-300">Added to your saved products</p>
      </div>
    </div>
  </div>
</div>